             Practical - I
1) ARC
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main() {
 int gd = DETECT, gm;
 initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
 arc(100, 100, 0, 135, 50);
 cout<<" Anuj 53";
 getch();
 closegraph();
}

2)Rectangle 
Input: 
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main(){
int gd = DETECT, gm;
initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
rectangle(100,100,200,200);
cout<<" Anuj 53";
getch();
closegraph();
}

BAR
3.)#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main(){
int gd = DETECT, gm;
initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
bar(100, 100, 200, 200);
cout<<" Anuj 53";
getch();
}

 4) Bar 3D
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main(){
int gd = DETECT, gm;
initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
bar3d(100, 100, 200, 200, 20, 1);
cout<<" Anuj 53";
getch();
closegraph();
}

5)Circle:
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main(){
int gd = DETECT, gm;
initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
circle(100, 100, 50);
cout<<" Anuj 53";
getch();
closegraph();
}

6) Triangle:
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main(){
int gd = DETECT, gm, points[] = {320, 150, 420, 300, 250, 300, 320, 150};
initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
drawpoly(4, points);
cout<<" Anuj 53";
getch();
closegraph();
}

7) FillPoly
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main(){
int gd = DETECT, gm, points[] = {320,150,420,300,320,150,420};
initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
fillpoly(4, points);
cout<<"Anuj 53";
getch();
closegraph();
}

8)Sector
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main(){
int gd = DETECT, gm;
initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
sector(100, 100, 0, 135, 25, 35);
cout<<"Anuj 53";
getch();
closegraph();
}

9) Outtextxy:
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main(){
int gd = DETECT, gm;
 char*drivername;
initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
drivername=getdrivername();
 outtextxy(200, 200, drivername);
 outtextxy(100, 100, “Phonk”);
cout<<"Anuj 53";
getch();
closegraph();
}

10)Ellipse
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main(){
int gd = DETECT, gm;
initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
ellipse(100, 100, 0, 350, 50, 25);
cout<<"Anuj 53";
getch();
closegraph();
}

11)Line:
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main()
{
int gd = DETECT, gm;
initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
line(100,100,200,200);
cout<<"Anuj 53";
getch();
closegraph();
}

12) Doraemon.
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main()
{
int gd = DETECT, gm;
initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
circle(300,200,150);
circle(255,128,25);
circle(250,125,40);
circle(345,125,40);
circle(297,200,15);
circle(350,128,25);
arc(300,220,180,8,80);
cout<<"Anuj 53";
getch();
closegraph();
}

           Practical - 2
1) Draw a simple hut on the screen. 
Input: 
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main() {
int gd=DETECT,gm;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
rectangle(100,200,400,400);
line(100,200,250,100);
line(250,100,400,200);
rectangle(220,350,280,400);
rectangle(150,250,200,300);
rectangle(300,250,350,300);
circle(250,160,20);
cout<<"Anuj 53";
getch();
closegraph(); }

2) Divide your screen into four regions, draw a circle, rectangle ellipse, and half in each region with 
an appropriate message. 
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
void main() {
int gd=DETECT,gm;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
int centerX=getmaxx()/2;
int centerY=getmaxy()/2;
line(0,centerY,getmaxx(),centerY);
line(centerX,0,centerX,getmaxy());
circle(150,120,90);
rectangle(400,30,520,210);
ellipse(150,360,0,360,70,100);
ellipse(520,360,120,0,130,40);
cout<<"Anuj 53";
getch();
closegraph(); }

       Practical - 3
1) Draw the following basic shapes in the center of the 
screen.
(i) Circle (ii) Rectangle (iii) Square (iv) Concentric Circles (v) ellipse (vi) Line.
Input:
#include<graphics.h>
#include<iostream.h>
#include<conio.h>
void main()
{
int gd=DETECT,gm;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
int a=getmaxx()/2;
int b=getmaxy()/2;
circle(a,b,150);
rectangle(a-200,b-100,a+200,b+100);
rectangle(a-100,b-100,a+100,b+100);
ellipse(a,b,0,360,a-40,b-90);
int i,r = 4;
for(i=0; i<15; i++)
{
circle(a,b,r);
r=r+5;
}
line(a-100,b-100,a+100,b+100);
cout<<"Anuj 53";
getch();
closegraph();
}

        Practical - 4
A) Develop the program for DDA line drawing algorithm.
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
#include<math.h>
#include<dos.h>
void drawline(int x1,int y1,int x2,int y2)
{
int gd = DETECT,gm;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
int dx = x2 - x1;
int dy = y2 - y1;
int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
float Yincrement = (float)dx/steps;
float Xincrement = (float)dy/steps;
float x = x1;
float y = y1;
for(int i=0; i<steps; i++)
{
putpixel(x,y,WHITE);
x = x + Xincrement;
y = y + Yincrement;
}
delay(100);
cout<<"Anuj 53";
getch();
closegraph();
}
void main()
{
drawline(100,100,200,200);
}

      Practical - 5
A) Develop the program for the Mid-Point circle drawing algorithm. 
Intput:
#include<iostream.h>
#include<stdio.h>
#include<conio.h>
#include<math.h>
//#include<docs.h>
#include<graphics.h>
void Midpoint(int xc, int yc, int radius) {
int gd=DETECT,gm;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
int x=radius;
int y=0;
int p=1-radius;
while(x>y) {
putpixel(xc+x,yc-y,WHITE);
putpixel(xc-x,yc-y,WHITE);
putpixel(xc+x,yc+y,WHITE);
putpixel(xc-x,yc+y,WHITE);
putpixel(xc+y,yc-x,WHITE);
putpixel(xc-y,yc-x,WHITE);
putpixel(xc+y,yc+x,WHITE);
putpixel(xc-y,yc+x,WHITE);
y++;
if(p<=0) {
p=p+2*y+1;
}
else {
x--;
p=p+2*y-2*x+1;
}
if(x<y) {
break;
}
}
delay(500);
printf("Anuj 53");
getch();
closegraph();
}
int main() {
int xc,yc,radius;
xc=200;
yc=200;
radius=30;
Midpoint(xc,yc,radius);
return 0;
}

      Practical - 6
A) Write a program to implement 2D scaling. 
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
#include<math.h>
int main()
{
int gd=DETECT,gm;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
int x,y,x1,y1,x2,y2;
cout<<"Enter X1 value: ";
cin>>x1;
cout<<"Enter Y1 value: ";
cin>>y1;
cout<<"Enter X2 value: ";
cin>>x2;
cout<<"Enter Y2 value: ";
cin>>y2;
cout<<"Before scaling....";
line(x1,y1,x2,y2);
cout<<"Enter X value: ";
cin>>x;
cout<<"Enter Y value: ";
cin>>y;
x1=(x1*x);
y1=(y1*y);
x2=(x2*x);
y2=(y2*y);
cout<<"after scaling ....";
line(x1,y1,x2,y2);
cout<<"Anuj 53";
getch();
closegraph();
}

    Practical - 7
1) Write a program to Perform 2D translation. 
Input:
#include<iostream.h>
#include<graphics.h>
#include<conio.h>
#include<math.h>
int main()
{
int gd=DETECT,gm;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
int x,y,x1,y1,x2,y2;
cout<<"Enter X1 value: ";
cin>>x1;
cout<<"Enter Y1 value: ";
cin>>y1;
cout<<"Enter X2 value: ";
cin>>x2;
cout<<"Enter Y2 value: ";
cin>>y2;
cout<<"Before scaling....";
line(x1,y1,x2,y2);
cout<<"Enter X value: ";
cin>>x;
cout<<"Enter Y value: ";
cin>>y;
x1=(x1+x);
y1=(y1+y);
x2=(x2+x);
y2=(y2+y);
line(x1,y1,x2,y2);
cout<<"Anuj 53";
getch();
closegraph();
}
     
  Practical - 8
1) Write a program to Perform shearing. (To draw a rectangle (object) and sheared ).
Input:
#include<iostream.h>
#include<conio.h>
#include<graphics.h>
void main()
{
int gd=DETECT,gm;
int x,y,x1,x2,y1,y2,x3,y3,shear;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
x=100;
y=200;
x1=100;
y1=250;
line(x,y,x1,y1);
x2=200;
y2=250;
line(x1,y1,x2,y2);
x3=200;
y3=200;
line(x2,y2,x3,y3);
line(x,y,x3,y3);
shear=1;
x=x+y*shear;
x1=x1+y1*shear;
x2=x2+y2*shear;
x3=x3+y3*shear;
line(x,y,x1,y1);
line(x1,y1,x2,y2);
line(x2,y2,x3,y3);
line(x,y,x3,y3);
getch();
closegraph();
cout<<"Anuj 53";
}

Practical - 9
Write a program to perfrom floot fill.

#include<iostream.h>
#include<conio.h>
#include<graphics.h>
void main()
{
int gd=DETECT,gm;
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
circle(100,100,50);
setfillstyle(HATCH_FILL,RED);
floodfill(100,100,WHITE);
cout<<"Anuj 53";
getch();
closegraph();
}

Practical - 10
A) Write a Program to fill a circle using boundary fill algorithm. 
Input:
#include<iostream.h> 
#include<graphics.h> 
#include<conio.h> 
#include<dos.h> 
void boundaryFill4(int x,int y, int fillColor,int boundaryColor) 
{ 
if (getpixel(x,y)!= fillColor && getpixel(x,y)!= boundaryColor) 
{ 
putpixel(x,y,fillColor); 
boundaryFill4(x+1,y,fillColor,boundaryColor); 
boundaryFill4(x,y+1,fillColor,boundaryColor); 
boundaryFill4(x-1,y,fillColor,boundaryColor); 
boundaryFill4(x,y-1,fillColor,boundaryColor); 
} 
} 
int main() 
{ 
int gd=DETECT,gm; 
initgraph(&gd,&gm,"C:\\TURBOC3\\BGI"); 
int x=250,y=200,radius=50; 
circle(x,y,radius); 
boundaryFill4(x,y,6,15); 
delay(1000); 
getch(); 
closegraph(); 
return 0; 
}

Practical - 11

#include <conio.h> 
#include <dos.h> 
#include <graphics.h> 
#include <iostream.h> 
 
// Driver code 
int main() 
{ 
 int gd = DETECT, gm, i, a; 
 
 // Path of the program 
 initgraph(&gd, &gm, "C:\\TURBOC3\\BGI"); 
 
 // Move the cycle 
 for (i = 0; i < 600; i++) { 
 // Upper body of cycle 
 line(50 + i, 405, 100 + i, 405); 
 line(75 + i, 375, 125 + i, 375); 
 line(50 + i, 405, 75 + i, 375); 
 line(100 + i, 405, 100 + i, 345); 
 line(150 + i, 405, 100 + i, 345); 
 line75+ i, 345, 75 + i, 370); 
 line(70 + i, 370, 80 + i, 370); 
 line(80 + i, 345, 100 + i, 345); 
 
 circle(150 + i, 405, 30); 
 circle(50 + i, 405, 30); 
  
 line(0, 436, getmaxx(), 436); 
 rectangle(getmaxx() - i, 436, 
 650 - i, 431);  
 delay(10); 
 cleardevice(); 
 } 
 getch(); 
 closegraph(); 
}